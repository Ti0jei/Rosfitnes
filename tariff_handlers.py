# tariff_handlers.py
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from keyboards import tariffs_kb, client_main_kb, client_kb, empty_kb
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from helpers import send_temp, send_ephemeral
from reg import profile_open
from reg import db as reg_db  # –∏–º–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ë–î (–≤–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞)
router = Router()

INVISIBLE = "\u2063"  # –Ω–µ–≤–∏–¥–∏–º—ã–π, –Ω–æ –ù–ï –ø—É—Å—Ç–æ–π —Å–∏–º–≤–æ–ª

async def show_with_reply_kb(message: Message, text: str, kb: ReplyKeyboardMarkup, *, md: bool = True):
    if md:
        await send_temp(message, text, parse_mode="Markdown", reply_markup=kb)
    else:
        await send_temp(message, text, reply_markup=kb)


# ---------- –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ----------
class TempState:
    TARIFF = "temp_tariff"

# ---------- –ª–æ–∫–∞–ª—å–Ω—ã–µ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è ----------
def base_tariff_menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
        is_persistent=False,
        one_time_keyboard=False,
    )



def value_tariff_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ß–∞—Ç —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º"), KeyboardButton(text="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")],
            [KeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
        is_persistent=False,
        one_time_keyboard=False,
    )
# tariff_handlers.py (—Ä—è–¥–æ–º —Å –¥—Ä—É–≥–∏–º–∏ KB)
def tariff_status_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å")],
            [KeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        is_persistent=False,
    )

def buy_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
        is_persistent=False,
        one_time_keyboard=False,
    )

def section_action_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
        is_persistent=False,
        one_time_keyboard=False,
    )

def value_tariff_final_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ß–∞—Ç —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º"), KeyboardButton(text="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
        is_persistent=False,
        one_time_keyboard=False,
    )



@router.message(StateFilter("*"), F.text.in_({"–ú–µ–Ω—é", "–ü—Ä–æ—Ñ–∏–ª—å", "–¢–∞—Ä–∏—Ñ"}))
async def forced_exit_from_fsm(message: Message, state: FSMContext):
    await state.clear()
    if message.text == "–ü—Ä–æ—Ñ–∏–ª—å":
        await profile_open(message)
    elif message.text == "–¢–∞—Ä–∏—Ñ":
        await show_tariffs(message, state)
    else:
        u = await reg_db.user.find_unique(where={"tg_id": message.from_user.id})
        has_app = bool(u and u.tariffName)
        await show_with_reply_kb(message, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞", client_kb(has_app), md=False)


# ---------- —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤ ----------
@router.message(StateFilter(None), F.text == "–¢–∞—Ä–∏—Ñ")
async def show_tariffs(message: Message, state: FSMContext):
    await state.clear()
    u = await reg_db.user.find_unique(where={"tg_id": message.from_user.id})
    if u and u.tariffName:
        await show_with_reply_kb(
            message,
            f"–£ –≤–∞—Å –∫—É–ø–ª–µ–Ω —Ç–∞—Ä–∏—Ñ: *{u.tariffName}*",
            tariff_status_kb()
        )
        return
    await show_with_reply_kb(message, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:", tariffs_kb())

@router.message(StateFilter(None), F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å")
async def tariff_change(message: Message, state: FSMContext):
    await state.clear()
    await show_with_reply_kb(message, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ:", tariffs_kb())

@router.message(StateFilter(None), F.text == "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é")
async def tariff_to_home(message: Message, state: FSMContext):
    await state.clear()
    u = await reg_db.user.find_unique(where={"tg_id": message.from_user.id})
    has_app = bool(u and u.tariffName)
    await show_with_reply_kb(message, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞", client_kb(has_app), md=False)



# ---------- –ë–∞–∑–æ–≤—ã–π ----------
@router.message(StateFilter(None), F.text == "üíº –ë–∞–∑–æ–≤—ã–π")
async def show_base_tariff(message: Message, state: FSMContext):
    await state.set_data({TempState.TARIFF: "–ë–∞–∑–æ–≤—ã–π"})
    await show_with_reply_kb(
        message,
        "üßæ *–ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ*\n\n–¢—É—Ç –±—É–¥–µ—Ç –≤–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ.",
        base_tariff_menu_kb()
    )

# ---------- –í—ã–≥–æ–¥–Ω—ã–π ----------
@router.message(StateFilter(None), F.text == "ü§ë –í—ã–≥–æ–¥–Ω—ã–π")
async def show_value_tariff(message: Message, state: FSMContext):
    await state.set_data({TempState.TARIFF: "–í—ã–≥–æ–¥–Ω—ã–π"})
    await show_with_reply_kb(
        message,
        "üßæ *–í—ã–≥–æ–¥–Ω—ã–π —Ç–∞—Ä–∏—Ñ*\n\n–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞.",
        buy_kb()
    )

# ---------- –ú–∞–∫—Å–∏–º—É–º ----------
@router.message(StateFilter(None), F.text == "üíé –ú–∞–∫—Å–∏–º—É–º")
async def show_maximum_tariff(message: Message, state: FSMContext):
    await state.set_data({TempState.TARIFF: "–ú–∞–∫—Å–∏–º—É–º"})
    await show_with_reply_kb(
        message,
        "üßæ *–ú–∞–∫—Å–∏–º—É–º*\n\n–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞.",
        buy_kb()
    )

@router.message(StateFilter(None), F.text == "üí≥ –ö—É–ø–∏—Ç—å")
async def handle_tariff_purchase(message: Message, state: FSMContext):
    data = await state.get_data()
    bought_tariff = data.get(TempState.TARIFF, "–ë–∞–∑–æ–≤—ã–π")

    await reg_db.user.upsert(
        where={"tg_id": message.from_user.id},
        data={
            "create": {
                "tg_id": message.from_user.id,
                "username": message.from_user.username,
                "tariffName": bought_tariff,
            },
            "update": {
                "username": message.from_user.username,
                "tariffName": bought_tariff,
            },
        },
    )

    await send_temp(message, f"‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –æ—Ñ–æ—Ä–º–∏–ª–∏ —Ç–∞—Ä–∏—Ñ *{bought_tariff}*", parse_mode="Markdown")

    u = await reg_db.user.find_unique(where={"tg_id": message.from_user.id})
    has_app = bool(u and u.tariffName)
    await show_with_reply_kb(message, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞", client_kb(has_app), md=False)
    await state.clear()




# ---------- –ù–∞–∑–∞–¥ (–≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –º–µ–Ω—é) ----------
@router.message(StateFilter(None), F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: Message, state: FSMContext):
    await state.clear()
    u = await reg_db.user.find_unique(where={"tg_id": message.from_user.id})
    has_app = bool(u and u.tariffName)
    await show_with_reply_kb(message, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞", client_kb(has_app), md=False)

