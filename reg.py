from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from prisma import Prisma
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from helpers import send_temp, send_keep   # <- –≤–º–µ—Å—Ç–æ from bot import ...
import re
from keyboards import client_kb, empty_kb
from aiogram.types import CallbackQuery
NAME_RE = re.compile(r"^[A-Za-z–ê-–Ø–∞-—è–Å—ë][A-Za-z–ê-–Ø–∞-—è–Å—ë\-'\s]{1,29}$")

def _name_ok(v: str) -> bool:
    return bool(NAME_RE.fullmatch((v or "").strip()))

def _name_fix(v: str) -> str:
    return re.sub(r"\s+", " ", (v or "").strip()).title()

router = Router()
db = Prisma()

reg_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")],
        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")],
    ],
    resize_keyboard=True,
    one_time_keyboard=False,   # –æ—Å—Ç–∞–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞ —ç–∫—Ä–∞–Ω–µ, –Ω–æ –±–µ–∑ "–ø—Ä–∏–ª–∏–ø–∞–Ω–∏—è"
)

def main_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí¨ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"), KeyboardButton(text="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")],
            [KeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
    )


CLIENT_PROFILE_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True,
    one_time_keyboard=False,
)


class ClientFSM(StatesGroup):
    accept_offer = State()
    first_name   = State()
    last_name    = State()
    email        = State()
    phone        = State()
    height_cm    = State()
    weight_kg    = State()
    age          = State()

class EditClientFSM(StatesGroup):
    menu       = State()
    first_name = State()
    last_name  = State()
    email      = State()
    phone      = State()
    height_cm  = State()
    weight_kg  = State()
    age        = State()

# –¥–æ–±–∞–≤—å —ç—Ç–æ —Ä—è–¥–æ–º —Å –¥—Ä—É–≥–∏–º–∏ —É—Ç–∏–ª–∏—Ç–∞–º–∏ (–ø–æ—Å–ª–µ def _render_client_preview ... –∏–ª–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤)

async def ask_input(message: Message, text: str, *, markdown: bool = True):
    kb = empty_kb()
    if markdown:
        await send_temp(message, text, parse_mode="Markdown", reply_markup=kb)
    else:
        await send_temp(message, text, reply_markup=kb)


def _email_ok(v: str) -> bool:
    return re.fullmatch(r"[^@\s]+@[^@\s]+\.[^@\s]+", v or "") is not None

def _phone_ok(v: str) -> bool:
    digits = re.sub(r"\D", "", v or "")
    return 10 <= len(digits) <= 12
def _cell(v: str) -> str:  # –∫–∞–ø—Å—É–ª–∞
    return f"`{v}`"

def _v(v, unit: str = "") -> str:
    return "-" if v in (None, "", "-") else f"{v}{unit}"

def _render_client_preview(data: dict) -> str:
    rows = [
        (_cell("–ò–º—è:"),     _cell(_v(data.get("first_name")))),
        (_cell("–§–∞–º–∏–ª–∏—è:"), _cell(_v(data.get("last_name")))),
        (_cell("E-mail:"),  _cell(_v(data.get("email")))),
        (_cell("–¢–µ–ª–µ—Ñ–æ–Ω:"), _cell(_v(data.get("phone")))),
        (_cell("–†–æ—Å—Ç:"),    _cell(_v(data.get("height_cm"), " —Å–º"))),
        (_cell("–í–µ—Å:"),     _cell(_v(data.get("weight_kg"), " –∫–≥"))),
        (_cell("–í–æ–∑—Ä–∞—Å—Ç:"), _cell(_v(data.get("age")))),
    ]
    body = "\n\n".join(f"{l}  {r}" for l, r in rows)
    return "‚úèÔ∏è *–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n\n" + body + "\n\n–∏ –Ω–∞–∂–º–∏—Ç–µ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"

async def _preview_form(message: Message, state: FSMContext):
    data = await state.get_data()
    await send_temp(
        message,
        "‚úèÔ∏è *–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ:*",
        parse_mode="Markdown",
        reply_markup=build_inline_profile_kb(data)
    )

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ö–õ–ò–ï–ù–¢–ê ===

async def show_client_reg(message: Message, state: FSMContext):
    await state.clear()
    await send_temp(
        message,
        "‚ùó –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª.",
        reply_markup=reg_kb,
    )
    await state.set_state(ClientFSM.first_name)
    await _preview_form(message, state)
    await ask_input(message, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è*:")

@router.message(lambda m: isinstance(m.text, str) and "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü" in m.text.lower())
async def client_entry(message: Message, state: FSMContext):
    print("DEBUG: client_entry —Å—Ä–∞–±–æ—Ç–∞–ª:", message.text)

    await state.clear()
    
    # –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å
    await state.set_state(ClientFSM.accept_offer)
    
    await send_temp(
    message,
    "üìÑ *–û—Ñ–µ—Ä—Ç–∞*\n\n"
    "–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â—ë–Ω —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.\n"
    "–ù–∞–∂–º–∏—Ç–µ *–ü—Ä–∏–Ω—è—Ç—å*, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
    reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å"), KeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å")]],
        resize_keyboard=True,
        one_time_keyboard=False,   # –±–µ–∑ is_persistent
    ),
    parse_mode="Markdown"
)

@router.message(ClientFSM.accept_offer, F.text.in_({"‚úÖ –ü—Ä–∏–Ω—è—Ç—å", "–ü—Ä–∏–Ω—è—Ç—å"}))
async def accept_offer(message: Message, state: FSMContext):
    await db.user.upsert(
        where={"tg_id": message.from_user.id},
        data={
            "create": {
                "tg_id": message.from_user.id,
                "username": message.from_user.username,
                "agreed_offer": True,
            },
            "update": {
                "username": message.from_user.username,
                "agreed_offer": True,
            },
        },
    )
    await state.set_state(ClientFSM.first_name)
    await send_temp(message, "‚ùó –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª.", reply_markup=reg_kb)
    await _preview_form(message, state)
    await ask_input(message, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è*:")



# reg.py ‚Äî —Ö–µ–Ω–¥–ª–µ—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ñ–µ—Ä—Ç—ã
@router.message(ClientFSM.accept_offer, F.text.in_({"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"}))
async def decline_offer(message: Message, state: FSMContext):
    await state.clear()
    await send_temp(message, "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_kb())


@router.message(ClientFSM.email)
async def client_email(message: Message, state: FSMContext):
    v = message.text.strip()
    if not _email_ok(v):
        await send_temp(message, "–ù–µ–≤–µ—Ä–Ω—ã–π e-mail. –ü—Ä–∏–º–µ—Ä: user@example.com", reply_markup=empty_kb())
        return
    await state.update_data(email=v)
    await _preview_form(message, state)
    await state.set_state(ClientFSM.phone)
    await ask_input(message, "üìû –¢–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79991234567):")

@router.message(ClientFSM.phone)
async def client_phone(message: Message, state: FSMContext):
    v = message.text.strip()
    if not _phone_ok(v):
        await send_temp(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω. –ü—Ä–∏–º–µ—Ä: +79991234567", reply_markup=empty_kb())
        return
    await state.update_data(phone=v)
    await _preview_form(message, state)
    await state.set_state(ClientFSM.height_cm)
    await ask_input(message, "üìè –†–æ—Å—Ç (—Å–º):")


@router.message(ClientFSM.height_cm)
async def client_height(message: Message, state: FSMContext):
    try:
        h = int(message.text.strip())
        if h < 50 or h > 260:
            raise ValueError()
    except Exception:
        await send_temp(message, "–í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç –≤ —Å–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 180)", reply_markup=empty_kb())
        return
    await state.update_data(height_cm=h)
    await _preview_form(message, state)
    await state.set_state(ClientFSM.weight_kg)
    await ask_input(message, "‚öñÔ∏è –í–µ—Å (–∫–≥):")


@router.message(ClientFSM.weight_kg)
async def client_weight(message: Message, state: FSMContext):
    try:
        w = float(message.text.replace(",", ".").strip())
        if w < 35 or w > 250:
            raise ValueError()
    except Exception:
        await send_temp(message, "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 82.5)", reply_markup=empty_kb())
        return
    await state.update_data(weight_kg=w)
    await _preview_form(message, state)
    await state.set_state(ClientFSM.age)
    await ask_input(message, "üéÇ –í–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç):")


@router.message(ClientFSM.age)
async def client_age(message: Message, state: FSMContext):
    try:
        a = int(message.text.strip())
        if a < 10 or a > 100:
            raise ValueError()
    except Exception:
        await send_temp(message, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 29)", reply_markup=empty_kb())
        return

    data = await state.update_data(age=a)
    await _preview_form(message, state)
    await db.user.upsert(
    where={"tg_id": message.from_user.id},
    data={
        "create": {
            "tg_id":      message.from_user.id,
            "username":   message.from_user.username,
            "first_name": data["first_name"],
            "last_name":  data["last_name"],
            "email":      data["email"],
            "phone":      data["phone"],
            "heightCm":   data.get("height_cm"),
            "weightKg":   data.get("weight_kg"),
            "age":        data.get("age"),
        },
        "update": {
            "username":   message.from_user.username,
            "first_name": data["first_name"],
            "last_name":  data["last_name"],
            "email":      data["email"],
            "phone":      data["phone"],
            "heightCm":   data.get("height_cm"),
            "weightKg":   data.get("weight_kg"),
            "age":        data.get("age"),
        },
    },
)


    await state.clear()
    await send_temp(
        message,
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
        reply_markup=client_kb(),
    )

@router.message(F.text == "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
async def reg_start(message: Message, state: FSMContext):
    cur = await state.get_state()
    if cur and cur.startswith("ClientFSM"):
        await send_temp(message, "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö ‚¨ÜÔ∏è")
        return
    # —Å—Ç–∞—Ä—Ç—É–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (–æ—Ñ–µ—Ä—Ç–∞)
    await client_entry(message, state)



@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def reg_cancel(message: Message, state: FSMContext):
    await state.clear()
    await send_temp(message, "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=main_kb())


@router.message(StateFilter(None), F.text.in_({"üë§ –ü—Ä–æ—Ñ–∏–ª—å", "–ü—Ä–æ—Ñ–∏–ª—å"}))
async def profile_open(message: Message):
    u = await db.user.find_unique(where={"tg_id": message.from_user.id})
    if not u:
        await send_temp(message, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å", reply_markup=client_kb(False))
        return

    text = (
        "*–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n"
        f"–ò–º—è: `{u.first_name or '-'}`\n"
        f"–§–∞–º–∏–ª–∏—è: `{u.last_name or '-'}`\n"
        f"E-mail: `{u.email or '-'}`\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: `{u.phone or '-'}`\n"
        f"–†–æ—Å—Ç: `{u.heightCm or '-'} —Å–º`\n"
        f"–í–µ—Å: `{u.weightKg or '-'} –∫–≥`\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: `{u.age or '-'}`\n"
        f"–¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: `{u.tariffName or '–Ω–µ –∫—É–ø–ª–µ–Ω'}`\n"
    )
    await send_temp(message, text, parse_mode="Markdown", reply_markup=CLIENT_PROFILE_KB)

@router.message(StateFilter(None), F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def client_back(message: Message, state: FSMContext):
    await state.clear()
    u = await db.user.find_unique(where={"tg_id": message.from_user.id})
    has_tariff = bool(u and u.tariffName)
    await send_temp(message, "üè† –ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞", reply_markup=client_kb(has_tariff))

@router.message(StateFilter(EditClientFSM), F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def edit_client_back(message: Message, state: FSMContext):
    await state.clear()
    u = await db.user.find_unique(where={"tg_id": message.from_user.id})
    has_tariff = bool(u and u.tariffName)
    await send_temp(message, "üè† –ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞", reply_markup=client_kb(has_tariff))

    

@router.message(StateFilter(None), F.text == "‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é")
async def back_to_main_menu(message: Message, state: FSMContext):
    await state.clear()
    u = await db.user.find_unique(where={"tg_id": message.from_user.id})
    has_tariff = bool(u and u.tariffName)
    await send_temp(message, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞", reply_markup=client_kb(has_tariff))



@router.message(StateFilter(None), F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def client_edit_start(message: Message, state: FSMContext):
    u = await db.user.find_unique(where={"tg_id": message.from_user.id})
    if not u:
        await send_temp(message, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await state.set_state(EditClientFSM.menu)
    await state.update_data(
        first_name=u.first_name or "", last_name=u.last_name or "",
        email=u.email or "", phone=u.phone or "",
        height_cm=u.heightCm or "", weight_kg=u.weightKg or "",
        age=u.age or ""
    )
    await _preview_edit_form(message, state)

def cancel_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True,
        one_time_keyboard=False,
    )


@router.message(ClientFSM.first_name)
async def client_first(message: Message, state: FSMContext):
    v = message.text
    if not _name_ok(v):
        await send_temp(message, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, 2‚Äì30 —Å–∏–º–≤–æ–ª–æ–≤.", reply_markup=empty_kb())
        return
    await state.update_data(first_name=_name_fix(v))
    await _preview_form(message, state)
    await state.set_state(ClientFSM.last_name)
    await ask_input(message, "‚úèÔ∏è –§–∞–º–∏–ª–∏—è:")

@router.message(ClientFSM.last_name)
async def client_last(message: Message, state: FSMContext):
    v = message.text
    if not _name_ok(v):
        await send_temp(message, "–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, 2‚Äì30 —Å–∏–º–≤–æ–ª–æ–≤.", reply_markup=empty_kb())
        return
    await state.update_data(last_name=_name_fix(v))
    await _preview_form(message, state)
    await state.set_state(ClientFSM.email)
    await ask_input(message, "‚úâÔ∏è Email:", markdown=False)


# –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
def build_inline_profile_kb(data: dict) -> InlineKeyboardMarkup:
    def val(k): return data.get(k) or "-"
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–ò–º—è: {val('first_name')}",    callback_data="edit_first_name"),
         InlineKeyboardButton(text=f"–§–∞–º–∏–ª–∏—è: {val('last_name')}", callback_data="edit_last_name")],
        [InlineKeyboardButton(text=f"E-mail: {val('email')}",      callback_data="edit_email"),
         InlineKeyboardButton(text=f"–¢–µ–ª–µ—Ñ–æ–Ω: {val('phone')}",     callback_data="edit_phone")],
        [InlineKeyboardButton(text=f"–†–æ—Å—Ç: {val('height_cm')} —Å–º", callback_data="edit_height"),
         InlineKeyboardButton(text=f"–í–µ—Å: {val('weight_kg')} –∫–≥",  callback_data="edit_weight")],
        [InlineKeyboardButton(text=f"–í–æ–∑—Ä–∞—Å—Ç: {val('age')}",       callback_data="edit_age")],
    ])
# reg.py (—Ä—è–¥–æ–º —Å build_inline_profile_kb)
def build_inline_edit_kb(data: dict) -> InlineKeyboardMarkup:
    def val(k): return data.get(k) or "-"
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–ò–º—è: {val('first_name')}",    callback_data="ec_first_name"),
         InlineKeyboardButton(text=f"–§–∞–º–∏–ª–∏—è: {val('last_name')}", callback_data="ec_last_name")],
        [InlineKeyboardButton(text=f"E-mail: {val('email')}",      callback_data="ec_email"),
         InlineKeyboardButton(text=f"–¢–µ–ª–µ—Ñ–æ–Ω: {val('phone')}",     callback_data="ec_phone")],
        [InlineKeyboardButton(text=f"–†–æ—Å—Ç: {val('height_cm')} —Å–º", callback_data="ec_height"),
         InlineKeyboardButton(text=f"–í–µ—Å: {val('weight_kg')} –∫–≥",  callback_data="ec_weight")],
        [InlineKeyboardButton(text=f"–í–æ–∑—Ä–∞—Å—Ç: {val('age')}",       callback_data="ec_age")],
    ])
async def _preview_edit_form(message: Message, state: FSMContext):
    data = await state.get_data()
    await send_temp(
        message,
        "‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è*\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:",
        parse_mode="Markdown",
        reply_markup=build_inline_edit_kb(data)
    )


ORDER = ["first_name", "last_name", "email", "phone", "height_cm", "weight_kg", "age"]

STATE_BY_FIELD = {
    "first_name": ClientFSM.first_name,
    "last_name":  ClientFSM.last_name,
    "email":      ClientFSM.email,
    "phone":      ClientFSM.phone,
    "height_cm":  ClientFSM.height_cm,
    "weight_kg":  ClientFSM.weight_kg,
    "age":        ClientFSM.age,
}

PROMPT_BY_FIELD = {
    "first_name": "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è*:",
    "last_name":  "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É *—Ñ–∞–º–∏–ª–∏—é*:",
    "email":      "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à *email*:",
    "phone":      "üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à *—Ç–µ–ª–µ—Ñ–æ–Ω* (+79991234567):",
    "height_cm":  "üìè –í–≤–µ–¥–∏—Ç–µ –≤–∞—à *—Ä–æ—Å—Ç* (—Å–º):",
    "weight_kg":  "‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à *–≤–µ—Å* (–∫–≥):",
    "age":        "üéÇ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à *–≤–æ–∑—Ä–∞—Å—Ç*:",
}

def _missing_before(target_field: str, data: dict) -> str | None:
    """–í–µ—Ä–Ω—ë—Ç –ø–µ—Ä–≤–æ–µ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ target_field."""
    for f in ORDER[:ORDER.index(target_field)]:
        if not data.get(f):
            return f
    return None

@router.callback_query(F.data == "edit_first_name")
async def inline_edit_first_name(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ClientFSM.first_name)
    await ask_input(callback.message, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è*:")
    await callback.answer()

@router.callback_query(F.data == "edit_last_name")
async def inline_edit_last_name(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    miss = _missing_before("last_name", data)
    if miss:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–æ–ª–µ.", show_alert=True)
        await state.set_state(STATE_BY_FIELD[miss])
        await ask_input(callback.message, PROMPT_BY_FIELD[miss])
        return
    await state.set_state(ClientFSM.last_name)
    await callback.message.answer(PROMPT_BY_FIELD["last_name"], parse_mode="Markdown", reply_markup=empty_kb())
    await callback.answer()

@router.callback_query(F.data == "edit_email")
async def inline_edit_email(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    miss = _missing_before("email", data)
    if miss:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–æ–ª–µ.", show_alert=True)
        await state.set_state(STATE_BY_FIELD[miss])
        await ask_input(callback.message, PROMPT_BY_FIELD[miss])
        return
    await state.set_state(ClientFSM.email)
    await callback.message.answer(PROMPT_BY_FIELD["email"], parse_mode="Markdown", reply_markup=empty_kb())
    await callback.answer()

@router.callback_query(F.data == "edit_phone")
async def inline_edit_phone(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    miss = _missing_before("phone", data)
    if miss:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–æ–ª–µ.", show_alert=True)
        await state.set_state(STATE_BY_FIELD[miss])
        await ask_input(callback.message, PROMPT_BY_FIELD[miss])
        return
    await state.set_state(ClientFSM.phone)
    await callback.message.answer(PROMPT_BY_FIELD["phone"], parse_mode="Markdown", reply_markup=empty_kb())
    await callback.answer()


from aiogram.types import CallbackQuery

@router.callback_query(F.data == "edit_height")
async def inline_edit_height(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    miss = _missing_before("height_cm", data)
    if miss:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–æ–ª–µ.", show_alert=True)
        await state.set_state(STATE_BY_FIELD[miss])
        await ask_input(callback.message, PROMPT_BY_FIELD[miss])
        return
    await state.set_state(ClientFSM.height_cm)
    await callback.message.answer(PROMPT_BY_FIELD["height_cm"], parse_mode="Markdown", reply_markup=empty_kb())
    await callback.answer()

@router.callback_query(F.data == "edit_weight")
async def inline_edit_weight(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    miss = _missing_before("weight_kg", data)
    if miss:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–æ–ª–µ.", show_alert=True)
        await state.set_state(STATE_BY_FIELD[miss])
        await ask_input(callback.message, PROMPT_BY_FIELD[miss])
        return
    await state.set_state(ClientFSM.weight_kg)
    await callback.message.answer(PROMPT_BY_FIELD["weight_kg"], parse_mode="Markdown", reply_markup=empty_kb())
    await callback.answer()

@router.callback_query(F.data == "edit_age")
async def inline_edit_age(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    miss = _missing_before("age", data)
    if miss:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–æ–ª–µ.", show_alert=True)
        await state.set_state(STATE_BY_FIELD[miss])
        await ask_input(callback.message, PROMPT_BY_FIELD[miss])
        return
    await state.set_state(ClientFSM.age)
    await callback.message.answer(PROMPT_BY_FIELD["age"], parse_mode="Markdown", reply_markup=empty_kb())
    await callback.answer()


@router.callback_query(F.data == "submit_register")
async def inline_submit_register(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    for field in ORDER:
        if not data.get(field):
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.", show_alert=True)
            await state.set_state(STATE_BY_FIELD[field])
            await ask_input(callback.message, PROMPT_BY_FIELD[field])
            return
    await callback.answer("–ì–æ—Ç–æ–≤–æ! –ñ–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª.", show_alert=True)

from aiogram.types import CallbackQuery

@router.callback_query(StateFilter(EditClientFSM.menu), F.data == "ec_first_name")
async def ec_first_name(cb: CallbackQuery, state: FSMContext):
    await state.set_state(EditClientFSM.first_name)
    await cb.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ *–∏–º—è*:", parse_mode="Markdown", reply_markup=cancel_kb())
    await cb.answer()

@router.callback_query(StateFilter(EditClientFSM.menu), F.data == "ec_last_name")
async def ec_last_name(cb: CallbackQuery, state: FSMContext):
    await state.set_state(EditClientFSM.last_name)
    await cb.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é *—Ñ–∞–º–∏–ª–∏—é*:", parse_mode="Markdown", reply_markup=cancel_kb())
    await cb.answer()

@router.callback_query(StateFilter(EditClientFSM.menu), F.data == "ec_email")
async def ec_email(cb: CallbackQuery, state: FSMContext):
    await state.set_state(EditClientFSM.email)
    await cb.message.answer("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π *email*:", parse_mode="Markdown", reply_markup=cancel_kb())
    await cb.answer()

@router.callback_query(StateFilter(EditClientFSM.menu), F.data == "ec_phone")
async def ec_phone(cb: CallbackQuery, state: FSMContext):
    await state.set_state(EditClientFSM.phone)
    await cb.message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π *—Ç–µ–ª–µ—Ñ–æ–Ω* (+79991234567):", parse_mode="Markdown", reply_markup=cancel_kb())
    await cb.answer()

@router.callback_query(StateFilter(EditClientFSM.menu), F.data == "ec_height")
async def ec_height(cb: CallbackQuery, state: FSMContext):
    await state.set_state(EditClientFSM.height_cm)
    await cb.message.answer("üìè –†–æ—Å—Ç (—Å–º):", reply_markup=cancel_kb())
    await cb.answer()

@router.callback_query(StateFilter(EditClientFSM.menu), F.data == "ec_weight")
async def ec_weight(cb: CallbackQuery, state: FSMContext):
    await state.set_state(EditClientFSM.weight_kg)
    await cb.message.answer("‚öñÔ∏è –í–µ—Å (–∫–≥):", reply_markup=cancel_kb())
    await cb.answer()

@router.callback_query(StateFilter(EditClientFSM.menu), F.data == "ec_age")
async def ec_age(cb: CallbackQuery, state: FSMContext):
    await state.set_state(EditClientFSM.age)
    await cb.message.answer("üéÇ –í–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç):", reply_markup=cancel_kb())
    await cb.answer()
@router.message(EditClientFSM.first_name)
async def edit_first_name_set(message: Message, state: FSMContext):
    v = message.text
    if not _name_ok(v):
        await send_temp(message, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, 2‚Äì30 —Å–∏–º–≤–æ–ª–æ–≤.", reply_markup=cancel_kb())
        return
    v = _name_fix(v)
    await db.user.update(where={"tg_id": message.from_user.id}, data={"first_name": v})
    await state.update_data(first_name=v)
    await state.set_state(EditClientFSM.menu)
    await _preview_edit_form(message, state)

@router.message(EditClientFSM.last_name)
async def edit_last_name_set(message: Message, state: FSMContext):
    v = message.text
    if not _name_ok(v):
        await send_temp(message, "–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, 2‚Äì30 —Å–∏–º–≤–æ–ª–æ–≤.", reply_markup=cancel_kb())
        return
    v = _name_fix(v)
    await db.user.update(where={"tg_id": message.from_user.id}, data={"last_name": v})
    await state.update_data(last_name=v)
    await state.set_state(EditClientFSM.menu)
    await _preview_edit_form(message, state)

@router.message(EditClientFSM.email)
async def edit_email_set(message: Message, state: FSMContext):
    v = message.text.strip()
    if not _email_ok(v):
        await send_temp(message, "–ù–µ–≤–µ—Ä–Ω—ã–π e-mail. –ü—Ä–∏–º–µ—Ä: user@example.com", reply_markup=cancel_kb())
        return
    await db.user.update(where={"tg_id": message.from_user.id}, data={"email": v})
    await state.update_data(email=v)
    await state.set_state(EditClientFSM.menu)
    await _preview_edit_form(message, state)

@router.message(EditClientFSM.phone)
async def edit_phone_set(message: Message, state: FSMContext):
    v = message.text.strip()
    if not _phone_ok(v):
        await send_temp(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω. –ü—Ä–∏–º–µ—Ä: +79991234567", reply_markup=cancel_kb())
        return
    await db.user.update(where={"tg_id": message.from_user.id}, data={"phone": v})
    await state.update_data(phone=v)
    await state.set_state(EditClientFSM.menu)
    await _preview_edit_form(message, state)

@router.message(EditClientFSM.height_cm)
async def edit_height_set(message: Message, state: FSMContext):
    try:
        h = int(message.text.strip())
        if h < 120 or h > 230: raise ValueError()
    except Exception:
        await send_temp(message, "–í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç –≤ —Å–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 180)", reply_markup=cancel_kb())
        return
    await db.user.update(where={"tg_id": message.from_user.id}, data={"heightCm": h})
    await state.update_data(height_cm=h)
    await state.set_state(EditClientFSM.menu)
    await _preview_edit_form(message, state)

@router.message(EditClientFSM.weight_kg)
async def edit_weight_set(message: Message, state: FSMContext):
    try:
        w = float(message.text.replace(",", ".").strip())
        if w < 35 or w > 250: raise ValueError()
    except Exception:
        await send_temp(message, "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 82.5)", reply_markup=cancel_kb())
        return
    await db.user.update(where={"tg_id": message.from_user.id}, data={"weightKg": w})
    await state.update_data(weight_kg=w)
    await state.set_state(EditClientFSM.menu)
    await _preview_edit_form(message, state)

@router.message(EditClientFSM.age)
async def edit_age_set(message: Message, state: FSMContext):
    try:
        a = int(message.text.strip())
        if a < 10 or a > 80: raise ValueError()
    except Exception:
        await send_temp(message, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 29)", reply_markup=cancel_kb())
        return
    await db.user.update(where={"tg_id": message.from_user.id}, data={"age": a})
    await state.update_data(age=a)
    await state.set_state(EditClientFSM.menu)
    await _preview_edit_form(message, state)
