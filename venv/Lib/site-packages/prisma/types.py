# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _int
    username: Optional[_str]
    first_name: Optional[_str]
    last_name: Optional[_str]
    heightCm: Optional[_int]
    weightKg: Optional[_float]
    age: Optional[_int]
    email: Optional[_str]
    phone: Optional[_str]
    agreed_offer: _bool
    tariffName: Optional[_str]
    fatsecret_token: 'FatSecretTokenCreateNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    tg_id: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _int
    username: Optional[_str]
    first_name: Optional[_str]
    last_name: Optional[_str]
    heightCm: Optional[_int]
    weightKg: Optional[_float]
    age: Optional[_int]
    email: Optional[_str]
    phone: Optional[_str]
    agreed_offer: _bool
    tariffName: Optional[_str]


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    tg_id: _int

class UserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserCreateWithoutRelationsInput'
    where: 'UserWhereUniqueInput'

class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]
    connect_or_create: Union['UserConnectOrCreateWithoutRelationsInput', List['UserConnectOrCreateWithoutRelationsInput']]

_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_UserWhereUnique_tg_id_Input = TypedDict(
    '_UserWhereUnique_tg_id_Input',
    {
        'tg_id': '_int',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_tg_id_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    tg_id: Union[AtomicBigIntInput, _int]
    username: Optional[_str]
    first_name: Optional[_str]
    last_name: Optional[_str]
    heightCm: Optional[Union[AtomicIntInput, _int]]
    weightKg: Optional[Union[AtomicFloatInput, _float]]
    age: Optional[Union[AtomicIntInput, _int]]
    email: Optional[_str]
    phone: Optional[_str]
    agreed_offer: _bool
    tariffName: Optional[_str]
    fatsecret_token: 'FatSecretTokenUpdateOneWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    tg_id: Union[AtomicBigIntInput, _int]
    username: Optional[_str]
    first_name: Optional[_str]
    last_name: Optional[_str]
    heightCm: Optional[Union[AtomicIntInput, _int]]
    weightKg: Optional[Union[AtomicFloatInput, _float]]
    age: Optional[Union[AtomicIntInput, _int]]
    email: Optional[_str]
    phone: Optional[_str]
    agreed_offer: _bool
    tariffName: Optional[_str]


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    connect_or_create: List['UserConnectOrCreateWithoutRelationsInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_tg_id_OrderByInput = TypedDict(
    '_User_tg_id_OrderByInput',
    {
        'tg_id': 'SortOrder',
    },
    total=True
)

_User_username_OrderByInput = TypedDict(
    '_User_username_OrderByInput',
    {
        'username': 'SortOrder',
    },
    total=True
)

_User_first_name_OrderByInput = TypedDict(
    '_User_first_name_OrderByInput',
    {
        'first_name': 'SortOrder',
    },
    total=True
)

_User_last_name_OrderByInput = TypedDict(
    '_User_last_name_OrderByInput',
    {
        'last_name': 'SortOrder',
    },
    total=True
)

_User_heightCm_OrderByInput = TypedDict(
    '_User_heightCm_OrderByInput',
    {
        'heightCm': 'SortOrder',
    },
    total=True
)

_User_weightKg_OrderByInput = TypedDict(
    '_User_weightKg_OrderByInput',
    {
        'weightKg': 'SortOrder',
    },
    total=True
)

_User_age_OrderByInput = TypedDict(
    '_User_age_OrderByInput',
    {
        'age': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_phone_OrderByInput = TypedDict(
    '_User_phone_OrderByInput',
    {
        'phone': 'SortOrder',
    },
    total=True
)

_User_agreed_offer_OrderByInput = TypedDict(
    '_User_agreed_offer_OrderByInput',
    {
        'agreed_offer': 'SortOrder',
    },
    total=True
)

_User_tariffName_OrderByInput = TypedDict(
    '_User_tariffName_OrderByInput',
    {
        'tariffName': 'SortOrder',
    },
    total=True
)

_User_RelevanceInner = TypedDict(
    '_User_RelevanceInner',
    {
        'fields': 'List[UserScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_User_RelevanceOrderByInput = TypedDict(
    '_User_RelevanceOrderByInput',
    {
        '_relevance': '_User_RelevanceInner',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_tg_id_OrderByInput',
    '_User_username_OrderByInput',
    '_User_first_name_OrderByInput',
    '_User_last_name_OrderByInput',
    '_User_heightCm_OrderByInput',
    '_User_weightKg_OrderByInput',
    '_User_age_OrderByInput',
    '_User_email_OrderByInput',
    '_User_phone_OrderByInput',
    '_User_agreed_offer_OrderByInput',
    '_User_tariffName_OrderByInput',
    '_User_RelevanceOrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    fatsecret_token: Union[bool, 'FatSecretTokenArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    fatsecret_token: Union[bool, 'FatSecretTokenArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    fatsecret_token: Union[bool, 'FatSecretTokenArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    fatsecret_token: Union[bool, 'FatSecretTokenArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    fatsecret_token: Union[bool, 'FatSecretTokenArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class FatSecretTokenIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class FatSecretTokenIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class FatSecretTokenIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class FatSecretTokenIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class FatSecretTokenIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class FatSecretTokenArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'FatSecretTokenIncludeFromFatSecretTokenRecursive1'


class FatSecretTokenArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'FatSecretTokenIncludeFromFatSecretTokenRecursive2'


class FatSecretTokenArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'FatSecretTokenIncludeFromFatSecretTokenRecursive3'


class FatSecretTokenArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'FatSecretTokenIncludeFromFatSecretTokenRecursive4'


class FatSecretTokenArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyFatSecretTokenArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FatSecretTokenOrderByInput', List['FatSecretTokenOrderByInput']]
    where: 'FatSecretTokenWhereInput'
    cursor: 'FatSecretTokenWhereUniqueInput'
    distinct: List['FatSecretTokenScalarFieldKeys']
    include: 'FatSecretTokenIncludeFromFatSecretTokenRecursive1'


class FindManyFatSecretTokenArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FatSecretTokenOrderByInput', List['FatSecretTokenOrderByInput']]
    where: 'FatSecretTokenWhereInput'
    cursor: 'FatSecretTokenWhereUniqueInput'
    distinct: List['FatSecretTokenScalarFieldKeys']
    include: 'FatSecretTokenIncludeFromFatSecretTokenRecursive2'


class FindManyFatSecretTokenArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FatSecretTokenOrderByInput', List['FatSecretTokenOrderByInput']]
    where: 'FatSecretTokenWhereInput'
    cursor: 'FatSecretTokenWhereUniqueInput'
    distinct: List['FatSecretTokenScalarFieldKeys']
    include: 'FatSecretTokenIncludeFromFatSecretTokenRecursive3'


class FindManyFatSecretTokenArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FatSecretTokenOrderByInput', List['FatSecretTokenOrderByInput']]
    where: 'FatSecretTokenWhereInput'
    cursor: 'FatSecretTokenWhereUniqueInput'
    distinct: List['FatSecretTokenScalarFieldKeys']
    include: 'FatSecretTokenIncludeFromFatSecretTokenRecursive4'


class FindManyFatSecretTokenArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FatSecretTokenOrderByInput', List['FatSecretTokenOrderByInput']]
    where: 'FatSecretTokenWhereInput'
    cursor: 'FatSecretTokenWhereUniqueInput'
    distinct: List['FatSecretTokenScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    tg_id: Union[_int, 'types.BigIntFilter']
    username: Union[None, _str, 'types.StringFilter']
    first_name: Union[None, _str, 'types.StringFilter']
    last_name: Union[None, _str, 'types.StringFilter']
    heightCm: Union[None, _int, 'types.IntFilter']
    weightKg: Union[None, _float, 'types.FloatFilter']
    age: Union[None, _int, 'types.IntFilter']
    email: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    agreed_offer: Union[_bool, 'types.BooleanFilter']
    tariffName: Union[None, _str, 'types.StringFilter']
    fatsecret_token: 'FatSecretTokenRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    tg_id: Union[_int, 'types.BigIntFilter']
    username: Union[None, _str, 'types.StringFilter']
    first_name: Union[None, _str, 'types.StringFilter']
    last_name: Union[None, _str, 'types.StringFilter']
    heightCm: Union[None, _int, 'types.IntFilter']
    weightKg: Union[None, _float, 'types.FloatFilter']
    age: Union[None, _int, 'types.IntFilter']
    email: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    agreed_offer: Union[_bool, 'types.BooleanFilter']
    tariffName: Union[None, _str, 'types.StringFilter']
    fatsecret_token: 'FatSecretTokenRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    tg_id: Union[_int, 'types.BigIntFilter']
    username: Union[None, _str, 'types.StringFilter']
    first_name: Union[None, _str, 'types.StringFilter']
    last_name: Union[None, _str, 'types.StringFilter']
    heightCm: Union[None, _int, 'types.IntFilter']
    weightKg: Union[None, _float, 'types.FloatFilter']
    age: Union[None, _int, 'types.IntFilter']
    email: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    agreed_offer: Union[_bool, 'types.BooleanFilter']
    tariffName: Union[None, _str, 'types.StringFilter']
    fatsecret_token: 'FatSecretTokenRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    tg_id: Union[_int, 'types.BigIntFilter']
    username: Union[None, _str, 'types.StringFilter']
    first_name: Union[None, _str, 'types.StringFilter']
    last_name: Union[None, _str, 'types.StringFilter']
    heightCm: Union[None, _int, 'types.IntFilter']
    weightKg: Union[None, _float, 'types.FloatFilter']
    age: Union[None, _int, 'types.IntFilter']
    email: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    agreed_offer: Union[_bool, 'types.BooleanFilter']
    tariffName: Union[None, _str, 'types.StringFilter']
    fatsecret_token: 'FatSecretTokenRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    tg_id: Union[_int, 'types.BigIntFilter']
    username: Union[None, _str, 'types.StringFilter']
    first_name: Union[None, _str, 'types.StringFilter']
    last_name: Union[None, _str, 'types.StringFilter']
    heightCm: Union[None, _int, 'types.IntFilter']
    weightKg: Union[None, _float, 'types.FloatFilter']
    age: Union[None, _int, 'types.IntFilter']
    email: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    agreed_offer: Union[_bool, 'types.BooleanFilter']
    tariffName: Union[None, _str, 'types.StringFilter']
    fatsecret_token: 'FatSecretTokenRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    tg_id: Union[_int, 'types.BigIntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    heightCm: Union[_int, 'types.IntWithAggregatesFilter']
    weightKg: Union[_float, 'types.FloatWithAggregatesFilter']
    age: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    agreed_offer: Union[_bool, 'types.BooleanWithAggregatesFilter']
    tariffName: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    tg_id: Union[_int, 'types.BigIntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    heightCm: Union[_int, 'types.IntWithAggregatesFilter']
    weightKg: Union[_float, 'types.FloatWithAggregatesFilter']
    age: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    agreed_offer: Union[_bool, 'types.BooleanWithAggregatesFilter']
    tariffName: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    tg_id: Union[_int, 'types.BigIntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    heightCm: Union[_int, 'types.IntWithAggregatesFilter']
    weightKg: Union[_float, 'types.FloatWithAggregatesFilter']
    age: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    agreed_offer: Union[_bool, 'types.BooleanWithAggregatesFilter']
    tariffName: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    tg_id: Union[_int, 'types.BigIntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    heightCm: Union[_int, 'types.IntWithAggregatesFilter']
    weightKg: Union[_float, 'types.FloatWithAggregatesFilter']
    age: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    agreed_offer: Union[_bool, 'types.BooleanWithAggregatesFilter']
    tariffName: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    tg_id: Union[_int, 'types.BigIntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    heightCm: Union[_int, 'types.IntWithAggregatesFilter']
    weightKg: Union[_float, 'types.FloatWithAggregatesFilter']
    age: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    agreed_offer: Union[_bool, 'types.BooleanWithAggregatesFilter']
    tariffName: Union[_str, 'types.StringWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _int
    tg_id: _int
    username: _str
    first_name: _str
    last_name: _str
    heightCm: _int
    weightKg: _float
    age: _int
    email: _str
    phone: _str
    agreed_offer: _bool
    tariffName: _str
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""
    id: float
    tg_id: float
    heightCm: float
    weightKg: float
    age: float


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""
    id: _int
    tg_id: _int
    heightCm: _int
    weightKg: _float
    age: _int


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _int
    tg_id: _int
    username: _str
    first_name: _str
    last_name: _str
    heightCm: _int
    weightKg: _float
    age: _int
    email: _str
    phone: _str
    agreed_offer: _bool
    tariffName: _str


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    tg_id: bool
    username: bool
    first_name: bool
    last_name: bool
    heightCm: bool
    weightKg: bool
    age: bool
    email: bool
    phone: bool
    agreed_offer: bool
    tariffName: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    tg_id: bool
    username: bool
    first_name: bool
    last_name: bool
    heightCm: bool
    weightKg: bool
    age: bool
    email: bool
    phone: bool
    agreed_offer: bool
    tariffName: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""
    id: bool
    tg_id: bool
    heightCm: bool
    weightKg: bool
    age: bool


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'tg_id': bool,
        'username': bool,
        'first_name': bool,
        'last_name': bool,
        'heightCm': bool,
        'weightKg': bool,
        'age': bool,
        'email': bool,
        'phone': bool,
        'agreed_offer': bool,
        'tariffName': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'tg_id': int,
        'username': int,
        'first_name': int,
        'last_name': int,
        'heightCm': int,
        'weightKg': int,
        'age': int,
        'email': int,
        'phone': int,
        'agreed_offer': int,
        'tariffName': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'tg_id',
    'username',
    'first_name',
    'last_name',
    'heightCm',
    'weightKg',
    'age',
    'email',
    'phone',
    'agreed_offer',
    'tariffName',
    'fatsecret_token',
]
UserScalarFieldKeys = Literal[
    'id',
    'tg_id',
    'username',
    'first_name',
    'last_name',
    'heightCm',
    'weightKg',
    'age',
    'email',
    'phone',
    'agreed_offer',
    'tariffName',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'fatsecret_token',
    ]

# FatSecretToken types

class FatSecretTokenOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the FatSecretToken create method"""
    id: _int
    user: 'UserCreateNestedWithoutRelationsInput'
    userId: _int
    scope: Optional[_str]
    tokenType: Optional[_str]
    createdAt: datetime.datetime


class FatSecretTokenCreateInput(FatSecretTokenOptionalCreateInput):
    """Required arguments to the FatSecretToken create method"""
    accessToken: _str
    refreshToken: _str
    expiresAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class FatSecretTokenOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the FatSecretToken create method, without relations"""
    id: _int
    userId: _int
    scope: Optional[_str]
    tokenType: Optional[_str]
    createdAt: datetime.datetime


class FatSecretTokenCreateWithoutRelationsInput(FatSecretTokenOptionalCreateWithoutRelationsInput):
    """Required arguments to the FatSecretToken create method, without relations"""
    accessToken: _str
    refreshToken: _str
    expiresAt: datetime.datetime

class FatSecretTokenConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'FatSecretTokenCreateWithoutRelationsInput'
    where: 'FatSecretTokenWhereUniqueInput'

class FatSecretTokenCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'FatSecretTokenCreateWithoutRelationsInput'
    connect: 'FatSecretTokenWhereUniqueInput'
    connect_or_create: 'FatSecretTokenConnectOrCreateWithoutRelationsInput'


class FatSecretTokenCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['FatSecretTokenCreateWithoutRelationsInput', List['FatSecretTokenCreateWithoutRelationsInput']]
    connect: Union['FatSecretTokenWhereUniqueInput', List['FatSecretTokenWhereUniqueInput']]
    connect_or_create: Union['FatSecretTokenConnectOrCreateWithoutRelationsInput', List['FatSecretTokenConnectOrCreateWithoutRelationsInput']]

_FatSecretTokenWhereUnique_id_Input = TypedDict(
    '_FatSecretTokenWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_FatSecretTokenWhereUnique_userId_Input = TypedDict(
    '_FatSecretTokenWhereUnique_userId_Input',
    {
        'userId': '_int',
    },
    total=True
)

FatSecretTokenWhereUniqueInput = Union[
    '_FatSecretTokenWhereUnique_id_Input',
    '_FatSecretTokenWhereUnique_userId_Input',
]


class FatSecretTokenUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    user: 'UserUpdateOneWithoutRelationsInput'
    accessToken: _str
    refreshToken: _str
    expiresAt: datetime.datetime
    scope: Optional[_str]
    tokenType: Optional[_str]
    createdAt: datetime.datetime


class FatSecretTokenUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    accessToken: _str
    refreshToken: _str
    expiresAt: datetime.datetime
    scope: Optional[_str]
    tokenType: Optional[_str]
    createdAt: datetime.datetime


class FatSecretTokenUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['FatSecretTokenCreateWithoutRelationsInput']
    connect: List['FatSecretTokenWhereUniqueInput']
    connect_or_create: List['FatSecretTokenConnectOrCreateWithoutRelationsInput']
    set: List['FatSecretTokenWhereUniqueInput']
    disconnect: List['FatSecretTokenWhereUniqueInput']
    delete: List['FatSecretTokenWhereUniqueInput']

    # TODO
    # update: List['FatSecretTokenUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['FatSecretTokenUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['FatSecretTokenScalarWhereInput']
    # upsert: List['FatSecretTokenUpserteWithWhereUniqueWithoutRelationsInput']


class FatSecretTokenUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'FatSecretTokenCreateWithoutRelationsInput'
    connect: 'FatSecretTokenWhereUniqueInput'
    connect_or_create: 'FatSecretTokenConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'FatSecretTokenUpdateInput'
    # upsert: 'FatSecretTokenUpsertWithoutRelationsInput'


class FatSecretTokenUpsertInput(TypedDict):
    create: 'FatSecretTokenCreateInput'
    update: 'FatSecretTokenUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_FatSecretToken_id_OrderByInput = TypedDict(
    '_FatSecretToken_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_FatSecretToken_userId_OrderByInput = TypedDict(
    '_FatSecretToken_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_FatSecretToken_accessToken_OrderByInput = TypedDict(
    '_FatSecretToken_accessToken_OrderByInput',
    {
        'accessToken': 'SortOrder',
    },
    total=True
)

_FatSecretToken_refreshToken_OrderByInput = TypedDict(
    '_FatSecretToken_refreshToken_OrderByInput',
    {
        'refreshToken': 'SortOrder',
    },
    total=True
)

_FatSecretToken_expiresAt_OrderByInput = TypedDict(
    '_FatSecretToken_expiresAt_OrderByInput',
    {
        'expiresAt': 'SortOrder',
    },
    total=True
)

_FatSecretToken_scope_OrderByInput = TypedDict(
    '_FatSecretToken_scope_OrderByInput',
    {
        'scope': 'SortOrder',
    },
    total=True
)

_FatSecretToken_tokenType_OrderByInput = TypedDict(
    '_FatSecretToken_tokenType_OrderByInput',
    {
        'tokenType': 'SortOrder',
    },
    total=True
)

_FatSecretToken_createdAt_OrderByInput = TypedDict(
    '_FatSecretToken_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_FatSecretToken_RelevanceInner = TypedDict(
    '_FatSecretToken_RelevanceInner',
    {
        'fields': 'List[FatSecretTokenScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_FatSecretToken_RelevanceOrderByInput = TypedDict(
    '_FatSecretToken_RelevanceOrderByInput',
    {
        '_relevance': '_FatSecretToken_RelevanceInner',
    },
    total=True
)

FatSecretTokenOrderByInput = Union[
    '_FatSecretToken_id_OrderByInput',
    '_FatSecretToken_userId_OrderByInput',
    '_FatSecretToken_accessToken_OrderByInput',
    '_FatSecretToken_refreshToken_OrderByInput',
    '_FatSecretToken_expiresAt_OrderByInput',
    '_FatSecretToken_scope_OrderByInput',
    '_FatSecretToken_tokenType_OrderByInput',
    '_FatSecretToken_createdAt_OrderByInput',
    '_FatSecretToken_RelevanceOrderByInput',
]



# recursive FatSecretToken types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

FatSecretTokenRelationFilter = TypedDict(
    'FatSecretTokenRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class FatSecretTokenListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class FatSecretTokenInclude(TypedDict, total=False):
    """FatSecretToken relational arguments"""
    user: Union[bool, 'UserArgsFromFatSecretToken']


    

class UserIncludeFromFatSecretToken(TypedDict, total=False):
    """Relational arguments for FatSecretToken"""
    fatsecret_token: Union[bool, 'FatSecretTokenArgsFromFatSecretTokenRecursive1']


class UserIncludeFromFatSecretTokenRecursive1(TypedDict, total=False):
    """Relational arguments for FatSecretToken"""
    fatsecret_token: Union[bool, 'FatSecretTokenArgsFromFatSecretTokenRecursive2']


class UserIncludeFromFatSecretTokenRecursive2(TypedDict, total=False):
    """Relational arguments for FatSecretToken"""
    fatsecret_token: Union[bool, 'FatSecretTokenArgsFromFatSecretTokenRecursive3']


class UserIncludeFromFatSecretTokenRecursive3(TypedDict, total=False):
    """Relational arguments for FatSecretToken"""
    fatsecret_token: Union[bool, 'FatSecretTokenArgsFromFatSecretTokenRecursive4']


class UserIncludeFromFatSecretTokenRecursive4(TypedDict, total=False):
    """Relational arguments for FatSecretToken"""

    

class UserArgsFromFatSecretToken(TypedDict, total=False):
    """Arguments for FatSecretToken"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromFatSecretTokenRecursive1(TypedDict, total=False):
    """Arguments for FatSecretToken"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromFatSecretTokenRecursive2(TypedDict, total=False):
    """Arguments for FatSecretToken"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromFatSecretTokenRecursive3(TypedDict, total=False):
    """Arguments for FatSecretToken"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromFatSecretTokenRecursive4(TypedDict, total=False):
    """Arguments for FatSecretToken"""
    
    

class FindManyUserArgsFromFatSecretToken(TypedDict, total=False):
    """Arguments for FatSecretToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromFatSecretTokenRecursive1(TypedDict, total=False):
    """Arguments for FatSecretToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromFatSecretTokenRecursive2(TypedDict, total=False):
    """Arguments for FatSecretToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromFatSecretTokenRecursive3(TypedDict, total=False):
    """Arguments for FatSecretToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromFatSecretTokenRecursive4(TypedDict, total=False):
    """Arguments for FatSecretToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class FatSecretTokenIncludeFromFatSecretToken(TypedDict, total=False):
    """Relational arguments for FatSecretToken"""
    user: Union[bool, 'UserArgsFromFatSecretTokenRecursive1']


class FatSecretTokenIncludeFromFatSecretTokenRecursive1(TypedDict, total=False):
    """Relational arguments for FatSecretToken"""
    user: Union[bool, 'UserArgsFromFatSecretTokenRecursive2']


class FatSecretTokenIncludeFromFatSecretTokenRecursive2(TypedDict, total=False):
    """Relational arguments for FatSecretToken"""
    user: Union[bool, 'UserArgsFromFatSecretTokenRecursive3']


class FatSecretTokenIncludeFromFatSecretTokenRecursive3(TypedDict, total=False):
    """Relational arguments for FatSecretToken"""
    user: Union[bool, 'UserArgsFromFatSecretTokenRecursive4']


class FatSecretTokenIncludeFromFatSecretTokenRecursive4(TypedDict, total=False):
    """Relational arguments for FatSecretToken"""

    

class FatSecretTokenArgsFromFatSecretToken(TypedDict, total=False):
    """Arguments for FatSecretToken"""
    include: 'FatSecretTokenIncludeFromFatSecretTokenRecursive1'


class FatSecretTokenArgsFromFatSecretTokenRecursive1(TypedDict, total=False):
    """Arguments for FatSecretToken"""
    include: 'FatSecretTokenIncludeFromFatSecretTokenRecursive2'


class FatSecretTokenArgsFromFatSecretTokenRecursive2(TypedDict, total=False):
    """Arguments for FatSecretToken"""
    include: 'FatSecretTokenIncludeFromFatSecretTokenRecursive3'


class FatSecretTokenArgsFromFatSecretTokenRecursive3(TypedDict, total=False):
    """Arguments for FatSecretToken"""
    include: 'FatSecretTokenIncludeFromFatSecretTokenRecursive4'


class FatSecretTokenArgsFromFatSecretTokenRecursive4(TypedDict, total=False):
    """Arguments for FatSecretToken"""
    
    

class FindManyFatSecretTokenArgsFromFatSecretToken(TypedDict, total=False):
    """Arguments for FatSecretToken"""
    take: int
    skip: int
    order_by: Union['FatSecretTokenOrderByInput', List['FatSecretTokenOrderByInput']]
    where: 'FatSecretTokenWhereInput'
    cursor: 'FatSecretTokenWhereUniqueInput'
    distinct: List['FatSecretTokenScalarFieldKeys']
    include: 'FatSecretTokenIncludeFromFatSecretTokenRecursive1'


class FindManyFatSecretTokenArgsFromFatSecretTokenRecursive1(TypedDict, total=False):
    """Arguments for FatSecretToken"""
    take: int
    skip: int
    order_by: Union['FatSecretTokenOrderByInput', List['FatSecretTokenOrderByInput']]
    where: 'FatSecretTokenWhereInput'
    cursor: 'FatSecretTokenWhereUniqueInput'
    distinct: List['FatSecretTokenScalarFieldKeys']
    include: 'FatSecretTokenIncludeFromFatSecretTokenRecursive2'


class FindManyFatSecretTokenArgsFromFatSecretTokenRecursive2(TypedDict, total=False):
    """Arguments for FatSecretToken"""
    take: int
    skip: int
    order_by: Union['FatSecretTokenOrderByInput', List['FatSecretTokenOrderByInput']]
    where: 'FatSecretTokenWhereInput'
    cursor: 'FatSecretTokenWhereUniqueInput'
    distinct: List['FatSecretTokenScalarFieldKeys']
    include: 'FatSecretTokenIncludeFromFatSecretTokenRecursive3'


class FindManyFatSecretTokenArgsFromFatSecretTokenRecursive3(TypedDict, total=False):
    """Arguments for FatSecretToken"""
    take: int
    skip: int
    order_by: Union['FatSecretTokenOrderByInput', List['FatSecretTokenOrderByInput']]
    where: 'FatSecretTokenWhereInput'
    cursor: 'FatSecretTokenWhereUniqueInput'
    distinct: List['FatSecretTokenScalarFieldKeys']
    include: 'FatSecretTokenIncludeFromFatSecretTokenRecursive4'


class FindManyFatSecretTokenArgsFromFatSecretTokenRecursive4(TypedDict, total=False):
    """Arguments for FatSecretToken"""
    take: int
    skip: int
    order_by: Union['FatSecretTokenOrderByInput', List['FatSecretTokenOrderByInput']]
    where: 'FatSecretTokenWhereInput'
    cursor: 'FatSecretTokenWhereUniqueInput'
    distinct: List['FatSecretTokenScalarFieldKeys']
    


FindManyFatSecretTokenArgs = FindManyFatSecretTokenArgsFromFatSecretToken
FindFirstFatSecretTokenArgs = FindManyFatSecretTokenArgsFromFatSecretToken


    

class FatSecretTokenWhereInput(TypedDict, total=False):
    """FatSecretToken arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    accessToken: Union[_str, 'types.StringFilter']
    refreshToken: Union[_str, 'types.StringFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    scope: Union[None, _str, 'types.StringFilter']
    tokenType: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['FatSecretTokenWhereInputRecursive1', List['FatSecretTokenWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['FatSecretTokenWhereInputRecursive1']
    OR: List['FatSecretTokenWhereInputRecursive1']
    NOT: List['FatSecretTokenWhereInputRecursive1']


class FatSecretTokenWhereInputRecursive1(TypedDict, total=False):
    """FatSecretToken arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    accessToken: Union[_str, 'types.StringFilter']
    refreshToken: Union[_str, 'types.StringFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    scope: Union[None, _str, 'types.StringFilter']
    tokenType: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['FatSecretTokenWhereInputRecursive2', List['FatSecretTokenWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['FatSecretTokenWhereInputRecursive2']
    OR: List['FatSecretTokenWhereInputRecursive2']
    NOT: List['FatSecretTokenWhereInputRecursive2']


class FatSecretTokenWhereInputRecursive2(TypedDict, total=False):
    """FatSecretToken arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    accessToken: Union[_str, 'types.StringFilter']
    refreshToken: Union[_str, 'types.StringFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    scope: Union[None, _str, 'types.StringFilter']
    tokenType: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['FatSecretTokenWhereInputRecursive3', List['FatSecretTokenWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['FatSecretTokenWhereInputRecursive3']
    OR: List['FatSecretTokenWhereInputRecursive3']
    NOT: List['FatSecretTokenWhereInputRecursive3']


class FatSecretTokenWhereInputRecursive3(TypedDict, total=False):
    """FatSecretToken arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    accessToken: Union[_str, 'types.StringFilter']
    refreshToken: Union[_str, 'types.StringFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    scope: Union[None, _str, 'types.StringFilter']
    tokenType: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['FatSecretTokenWhereInputRecursive4', List['FatSecretTokenWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['FatSecretTokenWhereInputRecursive4']
    OR: List['FatSecretTokenWhereInputRecursive4']
    NOT: List['FatSecretTokenWhereInputRecursive4']


class FatSecretTokenWhereInputRecursive4(TypedDict, total=False):
    """FatSecretToken arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    userId: Union[_int, 'types.IntFilter']
    accessToken: Union[_str, 'types.StringFilter']
    refreshToken: Union[_str, 'types.StringFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    scope: Union[None, _str, 'types.StringFilter']
    tokenType: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate FatSecretToken types


    

class FatSecretTokenScalarWhereWithAggregatesInput(TypedDict, total=False):
    """FatSecretToken arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    accessToken: Union[_str, 'types.StringWithAggregatesFilter']
    refreshToken: Union[_str, 'types.StringWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    tokenType: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['FatSecretTokenScalarWhereWithAggregatesInputRecursive1']
    OR: List['FatSecretTokenScalarWhereWithAggregatesInputRecursive1']
    NOT: List['FatSecretTokenScalarWhereWithAggregatesInputRecursive1']


class FatSecretTokenScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """FatSecretToken arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    accessToken: Union[_str, 'types.StringWithAggregatesFilter']
    refreshToken: Union[_str, 'types.StringWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    tokenType: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['FatSecretTokenScalarWhereWithAggregatesInputRecursive2']
    OR: List['FatSecretTokenScalarWhereWithAggregatesInputRecursive2']
    NOT: List['FatSecretTokenScalarWhereWithAggregatesInputRecursive2']


class FatSecretTokenScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """FatSecretToken arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    accessToken: Union[_str, 'types.StringWithAggregatesFilter']
    refreshToken: Union[_str, 'types.StringWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    tokenType: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['FatSecretTokenScalarWhereWithAggregatesInputRecursive3']
    OR: List['FatSecretTokenScalarWhereWithAggregatesInputRecursive3']
    NOT: List['FatSecretTokenScalarWhereWithAggregatesInputRecursive3']


class FatSecretTokenScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """FatSecretToken arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    accessToken: Union[_str, 'types.StringWithAggregatesFilter']
    refreshToken: Union[_str, 'types.StringWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    tokenType: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['FatSecretTokenScalarWhereWithAggregatesInputRecursive4']
    OR: List['FatSecretTokenScalarWhereWithAggregatesInputRecursive4']
    NOT: List['FatSecretTokenScalarWhereWithAggregatesInputRecursive4']


class FatSecretTokenScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """FatSecretToken arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    accessToken: Union[_str, 'types.StringWithAggregatesFilter']
    refreshToken: Union[_str, 'types.StringWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    tokenType: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class FatSecretTokenGroupByOutput(TypedDict, total=False):
    id: _int
    userId: _int
    accessToken: _str
    refreshToken: _str
    expiresAt: datetime.datetime
    scope: _str
    tokenType: _str
    createdAt: datetime.datetime
    _sum: 'FatSecretTokenSumAggregateOutput'
    _avg: 'FatSecretTokenAvgAggregateOutput'
    _min: 'FatSecretTokenMinAggregateOutput'
    _max: 'FatSecretTokenMaxAggregateOutput'
    _count: 'FatSecretTokenCountAggregateOutput'


class FatSecretTokenAvgAggregateOutput(TypedDict, total=False):
    """FatSecretToken output for aggregating averages"""
    id: float
    userId: float


class FatSecretTokenSumAggregateOutput(TypedDict, total=False):
    """FatSecretToken output for aggregating sums"""
    id: _int
    userId: _int


class FatSecretTokenScalarAggregateOutput(TypedDict, total=False):
    """FatSecretToken output including scalar fields"""
    id: _int
    userId: _int
    accessToken: _str
    refreshToken: _str
    expiresAt: datetime.datetime
    scope: _str
    tokenType: _str
    createdAt: datetime.datetime


FatSecretTokenMinAggregateOutput = FatSecretTokenScalarAggregateOutput
FatSecretTokenMaxAggregateOutput = FatSecretTokenScalarAggregateOutput


class FatSecretTokenMaxAggregateInput(TypedDict, total=False):
    """FatSecretToken input for aggregating by max"""
    id: bool
    userId: bool
    accessToken: bool
    refreshToken: bool
    expiresAt: bool
    scope: bool
    tokenType: bool
    createdAt: bool


class FatSecretTokenMinAggregateInput(TypedDict, total=False):
    """FatSecretToken input for aggregating by min"""
    id: bool
    userId: bool
    accessToken: bool
    refreshToken: bool
    expiresAt: bool
    scope: bool
    tokenType: bool
    createdAt: bool


class FatSecretTokenNumberAggregateInput(TypedDict, total=False):
    """FatSecretToken input for aggregating numbers"""
    id: bool
    userId: bool


FatSecretTokenAvgAggregateInput = FatSecretTokenNumberAggregateInput
FatSecretTokenSumAggregateInput = FatSecretTokenNumberAggregateInput


FatSecretTokenCountAggregateInput = TypedDict(
    'FatSecretTokenCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'accessToken': bool,
        'refreshToken': bool,
        'expiresAt': bool,
        'scope': bool,
        'tokenType': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

FatSecretTokenCountAggregateOutput = TypedDict(
    'FatSecretTokenCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'accessToken': int,
        'refreshToken': int,
        'expiresAt': int,
        'scope': int,
        'tokenType': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


FatSecretTokenKeys = Literal[
    'id',
    'user',
    'userId',
    'accessToken',
    'refreshToken',
    'expiresAt',
    'scope',
    'tokenType',
    'createdAt',
]
FatSecretTokenScalarFieldKeys = Literal[
    'id',
    'userId',
    'accessToken',
    'refreshToken',
    'expiresAt',
    'scope',
    'tokenType',
    'createdAt',
]
FatSecretTokenScalarFieldKeysT = TypeVar('FatSecretTokenScalarFieldKeysT', bound=FatSecretTokenScalarFieldKeys)

FatSecretTokenRelationalFieldKeys = Literal[
        'user',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields